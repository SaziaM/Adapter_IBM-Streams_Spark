<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<operatorInstanceModel xmlns="http://www.ibm.com/xmlns/prod/streams/spl/operator/instance" xmlns:an="http://www.ibm.com/xmlns/prod/streams/spl/annotation" xmlns:tt="http://www.ibm.com/xmlns/prod/streams/spl/tupleType" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <context>
    <kind>spl.utility::Custom</kind>
    <class>Matches</class>
    <operatorModelDirectory>/opt/ibm/InfoSphere_Streams/4.2.4.0/toolkits/spl/spl/utility/Custom</operatorModelDirectory>
    <applicationDirectory>/home/streamsadmin/workspace/TwitterSmackdown</applicationDirectory>
    <dataDirectory>/tmp</dataDirectory>
    <outputDirectory>/home/streamsadmin/workspace/TwitterSmackdown/output/sample.Smackdown/BuildConfig</outputDirectory>
    <toolkits>
      <toolkit isCurrentToolkit="false">
        <name>Smackdown</name>
        <rootDirectory>/home/streamsadmin/workspace/TwitterSmackdown</rootDirectory>
        <index>0</index>
      </toolkit>
      <toolkit isCurrentToolkit="true">
        <name>spl</name>
        <rootDirectory>/opt/ibm/InfoSphere_Streams/4.2.4.0/toolkits/spl</rootDirectory>
        <index>1</index>
      </toolkit>
      <toolkit isCurrentToolkit="false">
        <name>com.ibm.streamsx.inet</name>
        <rootDirectory>/opt/ibm/InfoSphere_Streams/4.2.4.0/toolkits/com.ibm.streamsx.inet</rootDirectory>
        <index>2</index>
      </toolkit>
    </toolkits>
    <optimized>true</optimized>
    <verbose>false</verbose>
    <networkByteOrdering>false</networkByteOrdering>
    <codeBeautification>false</codeBeautification>
    <includes>
      <include>"../type/BeJwrMSo2NCnOTUzOTskvzwvPL0opzjTNTSxJzgAAgzAKAA.h"</include>
      <include>"../type/BeJwrMSo2SUksSQw1NCzJL0nMCSlPTS0pBgBaogg_1.h"</include>
    </includes>
    <stateVariables>
      <stateVariable>
        <name>state$initialized</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>
          <cppType>SPL::boolean</cppType>
          <splType>boolean</splType>
          <hasRuntimeConstant>true</hasRuntimeConstant>
          <cppExpression>lit$16</cppExpression>
          <splExpression>false</splExpression>
          <hasFunctions>false</hasFunctions>
          <hasSideEffects>false</hasSideEffects>
          <readsState>false</readsState>
          <hasStreamAttributes>false</hasStreamAttributes>
          <sourceLocation>
            <file>sample/Smackdown.spl</file>
            <line>39</line>
            <column>36</column>
          </sourceLocation>
        </value>
        <sourceLocation>
          <file>sample/Smackdown.spl</file>
          <line>39</line>
          <column>22</column>
        </sourceLocation>
      </stateVariable>
      <stateVariable>
        <name>state$smackdown</name>
        <cppType>SPL::list&lt;SPL::list&lt;SPL::rstring &gt; &gt;</cppType>
        <splType>list&lt;list&lt;rstring&gt;&gt;</splType>
        <sourceLocation>
          <file>sample/Smackdown.spl</file>
          <line>40</line>
          <column>34</column>
        </sourceLocation>
      </stateVariable>
    </stateVariables>
    <runtimeConstants>
      <runtimeConstant>
        <name>lit$0</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>""</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$1</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>","</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$2</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>false</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$3</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"|"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$4</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>false</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$5</name>
        <cppType>SPL::int32</cppType>
        <splType>int32</splType>
        <value>0</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$6</name>
        <cppType>SPL::uint32</cppType>
        <splType>uint32</splType>
        <value>0</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$7</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"Smackdown opponent: "</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$8</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>true</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$9</name>
        <cppType>SPL::int32</cppType>
        <splType>int32</splType>
        <value>0</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$10</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>")"</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$11</name>
        <cppType>SPL::rstring</cppType>
        <splType>rstring</splType>
        <value>"(?i)("</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$12</name>
        <cppType>SPL::int32</cppType>
        <splType>int32</splType>
        <value>0</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$13</name>
        <cppType>SPL::int32</cppType>
        <splType>int32</splType>
        <value>0</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$14</name>
        <cppType>SPL::int32</cppType>
        <splType>int32</splType>
        <value>1</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$15</name>
        <cppType>SPL::uint32</cppType>
        <splType>uint32</splType>
        <value>0</value>
      </runtimeConstant>
      <runtimeConstant>
        <name>lit$16</name>
        <cppType>SPL::boolean</cppType>
        <splType>boolean</splType>
        <value>false</value>
      </runtimeConstant>
    </runtimeConstants>
    <sourceLocation>
      <file>sample/Smackdown.spl</file>
      <line>34</line>
      <column>3</column>
    </sourceLocation>
    <productVersion>4.2.4.0</productVersion>
    <checkpointKind>none</checkpointKind>
  </context>

  <parameters/>

  <inputPorts>
    <inputPort>
      <index>0</index>
      <tupleCppName>iport$0</tupleCppName>
      <tupleCppType>SPL::BeJwrMSo2SUksSQw1NCzJL0nMCSlPTS0pBgBaogg_1</tupleCppType>
      <tupleSPLType>tuple&lt;rstring data,uint64 totalTweets&gt;</tupleSPLType>
      <facade>false</facade>
      <mutationAllowed>true</mutationAllowed>
      <sourceLocation>
        <file>sample/Smackdown.spl</file>
        <line>34</line>
        <column>64</column>
      </sourceLocation>
      <tupleLogic>{
    if (SPL::boolean(!state$initialized)) 
        {
            {
                const SPL::list&lt;SPL::rstring &gt; &amp; temp$opponent = ::SPL::Functions::String::tokenize(lit$0, lit$1, (SPL::boolean)lit$2);
                for (SPL::list&lt;SPL::rstring &gt;::const_iterator it$opponent = temp$opponent.begin(); it$opponent != temp$opponent.end(); it$opponent++) {
                    const SPL::rstring&amp; id$opponent = *it$opponent;
                    {
                        const SPL::list&lt;SPL::rstring &gt; id$words = ::SPL::Functions::String::tokenize(id$opponent, lit$3, (SPL::boolean)lit$4);
                        ::SPL::Functions::Collections::appendM(state$smackdown, id$words);
                        do { SPL::BeJwrMSo2NCnOTUzOTskvzwvPL0opzjTNTSxJzgAAgzAKAA temp = SPL::BeJwrMSo2NCnOTUzOTskvzwvPL0opzjTNTSxJzgAAgzAKAA(::SPL::spl_cast&lt;SPL::rstring, SPL::list&lt;SPL::rstring &gt; &gt;::cast(id$words), lit$5); submit (temp, lit$6); } while(0);
                        ::SPL::Functions::Utility::printStringLn((lit$7 + ::SPL::spl_cast&lt;SPL::rstring, SPL::list&lt;SPL::rstring &gt; &gt;::cast(id$words)));
                    }
                }
            }
            state$initialized = lit$8;
        }
    SPL::int32 id$match = lit$9;
    {
        for (SPL::list&lt;SPL::list&lt;SPL::rstring &gt; &gt;::const_iterator it$words = state$smackdown.begin(); it$words != state$smackdown.end(); it$words++) {
            const SPL::list&lt;SPL::rstring &gt;&amp; id$words = *it$words;
            {
                {
                    for (SPL::list&lt;SPL::rstring &gt;::const_iterator it$word = id$words.begin(); it$word != id$words.end(); it$word++) {
                        const SPL::rstring&amp; id$word = *it$word;
                        {
                            const SPL::list&lt;SPL::rstring &gt; id$tokens = ::SPL::Functions::String::regexMatchPerl(iport$0.get_data(), ((lit$11 + id$word) + lit$10));
                            id$match += ((::SPL::Functions::Collections::size(id$tokens) &gt; lit$12) ? lit$14 : lit$13);
                        }
                    }
                }
                do { SPL::BeJwrMSo2NCnOTUzOTskvzwvPL0opzjTNTSxJzgAAgzAKAA temp = SPL::BeJwrMSo2NCnOTUzOTskvzwvPL0opzjTNTSxJzgAAgzAKAA(::SPL::spl_cast&lt;SPL::rstring, SPL::list&lt;SPL::rstring &gt; &gt;::cast(id$words), id$match); submit (temp, lit$15); } while(0);
            }
        }
    }
}
</tupleLogic>
      <attributes>
        <attribute>
          <name>data</name>
          <cppType>SPL::rstring</cppType>
          <splType>rstring</splType>
        </attribute>
        <attribute>
          <name>totalTweets</name>
          <cppType>SPL::uint64</cppType>
          <splType>uint64</splType>
        </attribute>
      </attributes>
      <tuple>
        <tt:attr name="data" type="rstring"/>
        <tt:attr name="totalTweets" type="uint64"/>
      </tuple>
    </inputPort>
  </inputPorts>

  <outputPorts>
    <outputPort>
      <index>0</index>
      <tupleCppName>oport$0</tupleCppName>
      <tupleCppType>SPL::BeJwrMSo2NCnOTUzOTskvzwvPL0opzjTNTSxJzgAAgzAKAA</tupleCppType>
      <tupleSPLType>tuple&lt;rstring smackdownWords,int32 match&gt;</tupleSPLType>
      <facade>false</facade>
      <mutationAllowed>true</mutationAllowed>
      <sourceLocation>
        <file>sample/Smackdown.spl</file>
        <line>34</line>
        <column>3</column>
      </sourceLocation>
      <attributes>
        <attribute>
          <name>smackdownWords</name>
          <cppType>SPL::rstring</cppType>
          <splType>rstring</splType>
        </attribute>
        <attribute>
          <name>match</name>
          <cppType>SPL::int32</cppType>
          <splType>int32</splType>
        </attribute>
      </attributes>
      <tuple>
        <tt:attr name="smackdownWords" type="rstring"/>
        <tt:attr name="match" type="int32"/>
      </tuple>
      <finalPunctuationPortScope>
        <port>0</port>
      </finalPunctuationPortScope>
    </outputPort>
  </outputPorts>

</operatorInstanceModel>
