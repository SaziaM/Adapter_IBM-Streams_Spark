package aa.a;



import com.google.common.io.Closeables;



import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.function.VoidFunction;
import org.apache.spark.examples.streaming.StreamingExamples;
import org.apache.spark.storage.StorageLevel;
import org.apache.spark.streaming.Duration;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.receiver.Receiver;
import scala.Tuple2;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ConnectException;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.lang.String;
import org.apache.spark.util.Utils;
/**
 * Custom Receiver that receives data over a socket.
 *
 * To run this on your local machine, you need to first run an IBM Receiver and IBM Sender in IBM Streams
 * 
 **/

public class JavaCustomReciever extends Receiver<String> {
	private static final Pattern SPACE = Pattern.compile(" ");

	public static void main(String[] args) throws Exception {
		//		if (args.leng"127.0.0.1"th < 2) {
		//			System.err.println("Usage: JavaCustomReceiver <hostname> <port>");
		//			System.exit(1);
		//		}

		//		StreamingExamples.setStreamingLogLevels();
		
		// Create the context with a 1 second batch size
		SparkConf sparkConf = new SparkConf().setMaster("local[*]").setAppName("JavaCustomReceiver");
		JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, new Duration(1000));

		// Create an input stream with the custom receiver on target ip:port and count the
		// words in input stream of \n delimited text (eg. generated by 'nc')
		JavaReceiverInputDStream<String> lines = ssc.receiverStream(
				new JavaCustomReciever("127.0.0.1", Integer.parseInt("23453")));
		//		JavaDStream<String> words = lines.flatMap(x -> Arrays.asList(SPACE.split(x)).iterator());
		//		JavaPairDStream<String, Integer> wordCounts = words.mapToPair(s -> new Tuple2<>(s, 1))
		//				.reduceByKey((i1, i2) -> i1 + i2);

		//lines.map(x -> sender.send(x));
		lines.print();//print received data
		
		
		//Start data analytics here......
		
		//wordCounts.print();
		
		
		
		
		//sending back to IBM Streams with another port
		lines.foreachRDD(new VoidFunction<JavaRDD<String>>() {
			public void call(JavaRDD<String> rdd) throws Exception {
				rdd.foreachPartition(new VoidFunction<Iterator<String>>() {
					public void call(Iterator<String> partitionOfRecords) throws Exception {
						Socket mySocket = new Socket("localhost", 9998);
						final PrintWriter out = new PrintWriter(mySocket.getOutputStream(), true);
						while(partitionOfRecords.hasNext()) {
							out.println(partitionOfRecords.next());
						}
						mySocket.close();
					}
				});
			}
		});
		ssc.start();
		ssc.awaitTermination();
	}

	// ============= Receiver code that receives data over a socket ==============

	String host = null;
	int port = -1;

	public JavaCustomReciever(String host_ , int port_) {
		super(StorageLevel.MEMORY_AND_DISK_2());
		host = "127.0.0.1";
		port = 23453;
	}

	@Override
	public void onStart() {
		// Start the thread that receives data over a connection
		new Thread(this::receive).start();
	}

	@Override
	public void onStop() {
		// There is nothing much to do as the thread calling receive()
		// is designed to stop by itself isStopped() returns false
	}

	/** Create a socket connection and receive data until receiver is stopped */
	private void receive() {
		try {
			Socket socket = null;
			BufferedReader reader = null;
			try {
				// connect to the server
				socket = new Socket(host, port);
				reader = new BufferedReader(
						new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));
				// Until stopped or connection broken continue reading
				String userInput;
				while (!isStopped() && (userInput = reader.readLine()) != null) {
					System.out.println("Received data '" + userInput + "'");
					store(userInput);
				}
			} finally {
				Closeables.close(reader, /* swallowIOException = */ true);
				Closeables.close(socket,  /* swallowIOException = */ true);
			}
			// Restart in an attempt to connect again when server is active again
			restart("Trying to connect again");
		} catch(ConnectException ce) {
			// restart if could not connect to server
			restart("Could not connect", ce);
		} catch(Throwable t) {
			restart("Error receiving data", t);
		}
	}
	/** Create a socket connection and receive data until receiver is stopped */

}

